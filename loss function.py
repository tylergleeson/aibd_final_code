# -*- coding: utf-8 -*-
"""Copy of Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ku57g3gtQPxRlOLKKwMamEUNKe8M--8U
"""

import numpy as np

# Cost dictionary based on your finalized table
product_costs = {
    "Pool Guy Chlorine": {"over": 1.78, "under": 11.54},
    "Case Chlorine": {"over": 1.78, "under": 26.10},
    "Pool Guy Acid": {"over": 1.87, "under": 10.73},
    "Case Acid": {"over": 1.87, "under": 26.73},
    "Salt": {"over": 2.27, "under": 17.43},
    "7-in-1 Test Strips": {"over": 0.96, "under": 27.50},
    "Renew": {"over": 1.22, "under": 29.44},
    "Cal Hypo Shock": {"over": 1.11, "under": 12.26},
    "Phosphate Remover": {"over": 1.30, "under": 33.04},
    "Algaecide": {"over": 1.27, "under": 30.57}
}

def business_loss(preds, actuals, products):
    """
    Calculate business-aware loss per prediction.

    Args:
        preds: List or array of predicted demand
        actuals: List or array of actual demand
        products: List of product names matching each prediction

    Returns:
        Average loss per prediction
    """
    total_loss = 0
    n = len(preds)

    for pred, actual, product in zip(preds, actuals, products):
        error_over = max(0, pred - actual)
        error_under = max(0, actual - pred)
        costs = product_costs.get(product, {"over": 1.0, "under": 1.0})  # fallback to neutral
        total_loss += (costs["over"] * error_over + costs["under"] * error_under)

    return total_loss / n

